/*
Условие задачи:
Реализуйте простую программу на Go, которая моделирует посещение кафе с ограниченным количеством столов. Кафе вмещает не более четырёх гостей одновременно. Люди заходят в кафе, садятся за столы и проводят некоторое время за чашечкой кофе. Если свободных столов нет, гости ожидают снаружи.

Вам нужно:
Создать канал-семафор, который ограничивает количество гостей, находящихся в кафе одновременно.
Каждый гость проводит в кафе определенное время (например, 2 секунды), после чего покидает заведение.
Программа должна показывать, кто входит и выходит из кафе, а также сколько гостей находятся внутри в данный момент.
Ограничения:
Кафе одновременно может принять не более четырех гостей.
Гостей поступает неограниченно много.
Когда гостю удаётся войти в кафе, он сидит за столом указанное время и уходит.
*/
package main

import (
	"fmt"
	"sync"
	"time"
)

var mu sync.Mutex
var guestInCafe int

func guestsInCafe(semafore chan struct{}, guest int) {
	semafore <- struct{}{}
	defer func() {
		<-semafore
	}()
	mu.Lock()
	guestInCafe++
	fmt.Printf("Гость #%d зашел в кафе. Всего гостей в кафе: %d.\n", guest, guestInCafe)
	mu.Unlock()

	time.Sleep(1 * time.Second)

	mu.Lock()
	guestInCafe--
	fmt.Printf("Гость #%d вышел из кафе. Всего в кафе гостей: %d.\n", guest, guestInCafe)
	mu.Unlock()
}

func main() {
	tables := 4
	guests := 20
	semafore := make(chan struct{}, tables)
	wg := sync.WaitGroup{}

	for i := 1; i <= guests; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			guestsInCafe(semafore, i)
		}()
	}
	wg.Wait()
	fmt.Println("Все гости вышли из кафе")

}
