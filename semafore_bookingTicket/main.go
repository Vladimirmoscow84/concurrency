/*
Условие задачи:
Вас попросили смоделировать сервис бронирования билетов онлайн, который должен обеспечивать безопасность и надежность бронирований. Сервис может обрабатывать одновременно не более десяти запросов на бронирование. Если поступает больше запросов, то остальные должны стоять в очереди и ожидать освобождения свободного слота.

Напишите программу на Go, которая демонстрирует, как использовать семафор для ограничения количества одновременных обращений к сервису бронирования. Клиенты периодически делают запросы на бронь билета, и служба бронирует билет, если доступно свободное место.

Сервис бронирования должен отвечать следующим критериям:

Одновременно не более 10 запросов могут находиться в процессе обработки.
Остальные запросы должны встать в очередь и подождать, пока освободится место.
Запросы пользователей должны обрабатываться в порядке поступления.
Ограничения:
Среднее время обработки запроса составляет около 1 секундs.
Заявки на билеты поступают хаотически, с интервалом от 500 миллисекунд до 2 секунд.
*/
package main

import (
	"fmt"
	"sync"
	"time"
)

func booking(semafore chan struct{}, faggot int, wg *sync.WaitGroup) {
	defer wg.Done()
	semafore <- struct{}{}
	time.Sleep(1 * time.Second)
	fmt.Printf("Faggot #%d has booked ticket\n", faggot)
	<-semafore
}
func main() {
	//waiting := time.Duration((rand.IntN(1500) + 500) * int(time.Millisecond))
	faggots := 200
	requests := 10
	semafore := make(chan struct{}, requests)
	wg := &sync.WaitGroup{}

	for i := 1; i <= faggots; i++ {
		wg.Add(1)
		//time.Sleep(waiting)
		go booking(semafore, i, wg)
	}
	wg.Wait()
	fmt.Println("All faggots with tickets")

}
